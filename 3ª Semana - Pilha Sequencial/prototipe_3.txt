#include <stdio.h>
#include <stdlib.h>
#define MAX_PILHA 20

typedef struct{
	int vet[MAX_PILHA];
	int topo;
}TPilha;

TPilha* nova(){
	TPilha np = (TPilha*)malloc(sizeof(TPilha));
	np->topo = -1;
	return np;
}

int Empilhar(TPilha *p, int valor){
	if(p->topo >= MAX_PILHA-1){
		return -1
	}

	(p->topo)++;
	p->vet[p->topo] = val;
	return 0;	
}

int Desempilhar(TPilha *p, int *val){
	if(p->topo < 0){
		return -1;
	}

	val* = p->vet[p->topo];
	(p->topo)--;
	return 0;
}

TPilha* Liberar(TPilha *pilha){
	free(pilha);
	return (NULL);
}

int Prioridade(int c, int t){
  int pc,pt;
 
  if(c == (int)'^')
    pc = 4;
  else if(c == (int)'*' || c == (int)'/')
    pc = 2;
  else if(c == (int)'+' || c == (int)'-')
    pc = 1;
  else if(c == (int)'(')
    pc = 4;
 
  if(t == (int)'^')
    pt = 3;
  else if(t == (int)'*' || t == (int)'/')
    pt = 2;
  else if(t == (int)'+' || t == (int)'-')
    pt = 1;
  else if(t == (int)'(')
    pt = 0;
 
  return (pc > pt);
}

char trans_PF(int expressao[]){
	TPilha *pilha;
	int vetor[MAX_PILHA];
	int i = 0;

	pilha = nova();
	Empilhar(pilha, '41');
	do{
		c = expressao[i];
		i++;		

		switch(c){
			case (int)'(':
				Empilhar(*pilha, 40);
				break;

			case (int)')': case (int)'\0': 
				do{		
					if(pilha->vet[topo] != (int)'(')
						Desempilhar(*pilha, vetor[i]);	
				}while(vet[topo] != (int)'(');

			case (int)'+': case (int)'-': case (int)'*': case (int)'/': case (int)'^':
				 while(1){
					Desempilhar(*pilha, vetor[i]);
	        			if(Prioridade(c,t)){
          			 		Empilha(*pilha, vetor[i]);
          			 		Empilha(*pilha, pilha->vet[topo]);
          					break;
        			 	}
        			 	else{
          					printf("%c", t);
			
				 	}
				}
		}
	}while(c != '\0');
Liberar(pilha);
}


int main(){
	char expressao1[MAX_PILHA]='1+3*5^2';
	int expressao2[MAX_PILHA], i;

	for(i=0;i<strlen(expressao1);i++){
		expressao2[i]=expressao1[i];	
	}


}