#include <stdio.h>
#include <stdlib.h>

#define MAX_FILA 100
typedef struct {
int id [MAX_FILA];
int nota [MAX_FILA];
int n; /numero de elementos armazenados na fila/
int ini; /* indice para o inicio da fila */
} TFila;
typedef TFila *PFila;

PFila cria_fila(){
PFila fila = (PFila) malloc (sizeof (TFila));
fila->n = 0;
fila->ini = 0;
return (fila);
}

int insere (PFila p, int val1, int val2){

int fim;
if (p==NULL) {
printf("Fila nao inicializada!\n");

return -1; }
if (p->n == MAX_FILA ) {

printf("Fila cheia!\n");
return -1; }
fim = (p->ini+p->n)%MAX_FILA;
p->id[fim] = val1;
p->nota[fim] = val2;
p->n++;
return 0; }

/int retira (PFila p, int val){
if (p==NULL) {
printf("fila nao inicializada!\n");
return -1; }
if (p->n ==0) {
printf("Fila vazia!\n");
return -1; }
*val = p->itens[p->ini];
p->ini = incr_indice(p->ini);
p->n--;
return 0;
}*/

int incr_indice(int i) {
if (i==MAX_FILA-1)
return 0;
else
return i+1;

}
int classifica(PFila pf,int m){
    if(m ==0)
        return pf;
    
int i,j,aux1,aux2;
 for( i=0; i<=m; i++ ){
                  for( j=i+1; j<=m; j++ ){
                       if( pf->nota[i] < pf->nota[j] ){
				aux1 = pf->nota[i];
				aux2 = pf->id[i];
				pf->nota[i] = pf->nota[j];
				pf->id[i] = pf->id[j];
				pf->nota[j] = aux1;
				pf->id[j] = aux2;
                       }
                  }
           }
return 0;
}


int main (){
	int n, v,i, *vagas, id, nota;
	PFila pf=cria_fila();

    printf("Quantidade de candidatos: ");
	scanf("%d",&n);
	printf("Quantidade de vagas: ");
	scanf("%d",&v);


	vagas = (int)  malloc (v*sizeof(int));

	for(i=0;i<n;i++){
        printf("Numero Identificador do candidato %d: ", i+1);
        scanf("%d",&id);
        printf("Nota do candidato: ");
		scanf("%d",&nota);
		if(nota<0||nota>100){
		    printf("Nota invalida, insira novamente: ");
		    scanf("%d",&nota);
		}
		insere(pf,id,nota);
        classifica(pf,i);
        printf("Candidato Inserido\n");
	}
	for(i =0;i<n;i++){
	    printf("Candidato ");
		printf("%d, ",pf->id[i]);
		printf("nota ");
		printf("%d\n",pf->nota[i]);
	}
	
	
	free(vagas);
	free(pf);
}